<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Finagle blog</title>
  <id>https://finagle.github.io/blog</id>
  <link href="https://finagle.github.io/blog"/>
  <link href="https://finagle.github.io/blog/blog/feed.xml" rel="self"/>
  <updated>2017-07-11T17:00:00-07:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>🏖️ Summertime Review</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2017/07/12/summer-review/"/>
    <id>https://finagle.github.io/blog/2017/07/12/summer-review/</id>
    <published>2017-07-11T17:00:00-07:00</published>
    <updated>2017-07-12T15:04:19-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It’s time to take a look back at what went down in
&lt;a href="https://twitter.github.io/finagle/"&gt;Finagle&lt;/a&gt;,
&lt;a href="https://twitter.github.io/finatra/"&gt;Finatra&lt;/a&gt; and related libraries
over the past few months and get an idea of what’s to come. This
covers the
&lt;a href="https://github.com/twitter/finagle/releases/tag/finagle-6.44.0"&gt;April&lt;/a&gt; and
&lt;a href="https://github.com/twitter/finagle/releases/tag/finagle-6.45.0"&gt;June&lt;/a&gt; releases
(apologies for missing May) as well as the upcoming 7.0.0 release
planned for the next week or two. We plan to continue this review
regularly, on a quarterly basis. You can start with a recap of what we
were talking about &lt;a href="https://finagle.github.io/blog/2017/03/20/spring-planning/"&gt;last
time&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Efficiency&lt;/h4&gt;

&lt;p&gt;Considerable effort at improving the throughput of Finagle services
was undertaken and your CPU cores and garbage collectors have spent
that extra time getting an early start on their summer beach reads.
This work was broad based and intended to help the majority of Finagle
users. Examples include our Tweet service which saw a 15% decrease in
CPU time and a 13% decrease in allocations while our User service saw
16% and 6% respectively.&lt;/p&gt;

&lt;p&gt;The work began with a suite of optimizations to Twitter
Futures [&lt;a href="https://github.com/twitter/util/commit/9261c493490b3b916fcb4fe1f704d9dda2192035"&gt;1&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/da5bdcd02d94e35b194f1e923ce5cbc02d603865"&gt;2&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/01eb1e4d3e5b1c76c91f8f2e8c963e95db6a86b6"&gt;3&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/21747f6aa96a960ee4277af08bd028e042de0542"&gt;4&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/90bdd298555ffd815f2f3f4de5277bb90fb5da65"&gt;5&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/a914d536448b1e9d55881dee15a370ad3369c911"&gt;6&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/a51c2d0cacce0ae4a7d5f99fad58e19fe3e6d670"&gt;7&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/b86df6884a798e485bacac53d8f0f9e071413ced"&gt;8&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/fe44b073cc188bf861fa91aecf71afabde9b72f7"&gt;9&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/dbb7d1a56c4bd7f65f42b6c9a547c243201ba2cc"&gt;10&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/20f7b5e9ae09595f149788a8c2c8e5cf9cf8dd73"&gt;11&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/ea5ec99207307ba0bb4868754f22dc10d7d3774d"&gt;12&lt;/a&gt;,
&lt;a href="https://github.com/twitter/util/commit/76ea96225a9e03581f75d3a91dd86b6d09a77fbb"&gt;13&lt;/a&gt;] (these
ideas came courtesy of
&lt;a href="https://twitter.com/flaviowbrasil"&gt;@flaviowbrasil&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Finagle’s memcached client got a tune
up [&lt;a href="https://github.com/twitter/finagle/commit/f47ffdfa1f67d1c029e5dc7d782e8d22de2d56a6"&gt;1&lt;/a&gt;,
&lt;a href="https://github.com/twitter/finagle/commit/4a19d7d0102a18b30bb04ddc8a8b94ea199d2e5f"&gt;2&lt;/a&gt;,
&lt;a href="https://github.com/twitter/finagle/commit/66f14feb5d92bcdcce471b48d191c697935c4e8f"&gt;3&lt;/a&gt;,
&lt;a href="https://github.com/twitter/finagle/commit/7f4b052b10aac702d985d8288bf6c7afaec4e514"&gt;4&lt;/a&gt;,
&lt;a href="https://github.com/twitter/finagle/commit/5978d6bf6083cc778c8bcfe0f8ad0d63d8514226"&gt;5&lt;/a&gt;]
and microbenchmarks show decoding times decreased by a factor of four.&lt;/p&gt;

&lt;p&gt;The move to Netty 4 allows us to take advantage of more optimizations
and internally we’ve toggled on &lt;a href="https://github.com/twitter/finagle/blob/finagle-6.45.0/finagle-netty4/src/main/resources/com/twitter/toggles/configs/com.twitter.finagle.netty4.json#L14"&gt;buffer
pooling&lt;/a&gt; and
&lt;a href="https://github.com/twitter/finagle/blob/finagle-6.45.0/finagle-netty4/src/main/resources/com/twitter/toggles/configs/com.twitter.finagle.netty4.json#L9"&gt;refcounting&lt;/a&gt; for
ThriftMux control messages while the rollout of the &lt;a href="https://github.com/twitter/finagle/blob/finagle-6.45.0/finagle-netty4/src/main/resources/com/twitter/toggles/configs/com.twitter.finagle.netty4.json#L4"&gt;edge-triggered
native
transport&lt;/a&gt; is
in progress.&lt;/p&gt;

&lt;p&gt;Our new load balancer, &lt;a href="https://github.com/twitter/finagle/blob/finagle-6.45.0/finagle-core/src/main/scala/com/twitter/finagle/loadbalancer/aperture/DeterministicOrdering.scala"&gt;Deterministic
Aperture&lt;/a&gt;,
has begun early production usage. It is early days, though the initial
results are promising and our goal is to promote it to Finagle’s
default load balancer.&lt;/p&gt;

&lt;p&gt;Scrooge work included allocation reductions for
&lt;a href="https://github.com/twitter/scrooge/commit/ac5cd42ed751c351509d10ec959ed87985ca8672"&gt;Scala&lt;/a&gt; and
&lt;a href="https://github.com/twitter/scrooge/commit/4cd9ee7017d75cec068f5acf14b97bc2955474ec"&gt;Java&lt;/a&gt; generated
code. Investigations have begun to see if the generated code can be
more modularized which will unlock
 &lt;a href="https://twitter.github.io/finagle/guide/Clients.html#response-classification"&gt;ResponseClassification&lt;/a&gt; on
the server-side among other wins.&lt;/p&gt;

&lt;p&gt;The emphasis on efficiency will continue this summer with a few bets
we believe will payoff. The first is making ThriftMux+Scrooge operate
directly on off-heap buffer representations, unlocking zero-copy
payloads. Given the gains we’ve seen by leaving Mux control messages
off-heap, we expect big gains. The second bet is changing Mux’s
sessions to be “push based” instead of “pull”. This avoids the
conversions back and forth from Netty’s push model and early
prototyping has shown significant throughput improvements. Assuming
the new push based model performs as expected, we plan to deliver
similar changes for HTTP/2 and Memcached.&lt;/p&gt;

&lt;h4&gt;Resiliency&lt;/h4&gt;

&lt;p&gt;Transparently replacing HTTP/1.1 usage with HTTP/2 is underway. H2
gives you the resource reductions (a single multiplexed connection)
and resiliency features (fast rolling restarts without a success rate
drop) that services are already accustomed to with Mux.&lt;/p&gt;

&lt;h4&gt;Operability&lt;/h4&gt;

&lt;p&gt;While most of the spring was work on plumbing that you get for free, a
couple of user APIs were added in
&lt;a href="https://twitter.github.io/finagle/guide/Configuration.html#tunables"&gt;Tunables&lt;/a&gt; and
&lt;a href="https://twitter.github.io/finagle/guide/MethodBuilder.html"&gt;MethodBuilder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a rich tradition of our interns landing incredibly useful
functionality — TwitterServer’s admin pages UI, client-side nack
admission control, and histograms details. This summer is no different
with &lt;a href="https://twitter.com/McKardah"&gt;@McKardah&lt;/a&gt; working to wire up
Twitter Futures into &lt;a href="https://blog.jetbrains.com/idea/2017/02/intellij-idea-2017-1-eap-extends-debugger-with-async-stacktraces/"&gt;IDEA’s async
stacktraces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Converting logging in TwitterServer over to slf4j is a large change
that is in progress.&lt;/p&gt;

&lt;h4&gt;Security&lt;/h4&gt;

&lt;p&gt;A revamped set of APIs for SSL/TLS were shipped which is powering our
mTLS implementation. SSL/TLS work continues with a goal of adding
&lt;a href="https://en.wikipedia.org/wiki/Opportunistic_TLS"&gt;STARTTLS&lt;/a&gt; support to
Mux.&lt;/p&gt;

&lt;h4&gt;Tech Debt&lt;/h4&gt;

&lt;p&gt;All of Finagle’s protocols have been migrated to Netty 4 (squeee!!!)
and the work to rip Netty 3 completely out of Finagle is pretty far
along. It has taken us years to get here and the benefits for
efficiency and features like HTTP/2 are good indicators of why it was
worth it.&lt;/p&gt;

&lt;p&gt;Thanks for following along. Please feel free to ask questions on the
&lt;a href="https://groups.google.com/forum/#!forum/finaglers"&gt;mailing
list&lt;/a&gt; about
anything that is unclear and we’ll help clarify if you would like to
know more.&lt;/p&gt;

&lt;p&gt;Kevin Oliver and the Core Systems Libraries team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Integration of CLA Assistant</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2017/06/09/cla-requirement/"/>
    <id>https://finagle.github.io/blog/2017/06/09/cla-requirement/</id>
    <published>2017-06-08T17:00:00-07:00</published>
    <updated>2017-07-12T10:14:48-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We have integrated &lt;a href="https://cla-assistant.io"&gt;CLA Assistant&lt;/a&gt; with the Finagle Github repository.&lt;/p&gt;

&lt;p&gt;Due to lack of discoverability, not everyone has been consistent about signing &lt;a href="https://engineering.twitter.com/opensource/cla"&gt;Twitter&amp;rsquo;s existing CLA&lt;/a&gt;. We believe that this will be less of a burden than manually checking CLAs against an internal list.&lt;/p&gt;

&lt;p&gt;The new tooling goes a long way in improving the experience for the new Finagle contributors by embedding the CLA signing step into a Github workflow. This means, every first-time Finagle contributor
will now be prompted into signing a CLA before their PRs are reviewed/accepted.&lt;/p&gt;

&lt;p&gt;Eitan Adler, Vladimir Kostyukov, on behalf of Twitter&amp;rsquo;s Open Source Team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>🌇 Upcoming module removals 🌇</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2017/04/06/announce-removals/"/>
    <id>https://finagle.github.io/blog/2017/04/06/announce-removals/</id>
    <published>2017-04-05T17:00:00-07:00</published>
    <updated>2017-04-06T10:52:00-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As mentioned in our &lt;a href="https://finagle.github.io/blog/2017/03/20/spring-planning/"&gt;spring planning notes&lt;/a&gt;, we are sunsetting a number of modules that have been unsupported or exist in a zombie-like state.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;finagle-ostrich4&lt;/li&gt;
&lt;li&gt;finagle-kestrel&lt;/li&gt;
&lt;li&gt;finagle-stream&lt;/li&gt;
&lt;li&gt;finagle-native&lt;/li&gt;
&lt;li&gt;finagle-mdns&lt;/li&gt;
&lt;li&gt;util-eval&lt;/li&gt;
&lt;li&gt;ostrich&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The upcoming April release will be their final one. Due to Ostrich being a separate project it will not be removed immediately.&lt;/p&gt;

&lt;p&gt;Please feel free to ask questions on the &lt;a href="https://groups.google.com/forum/#!forum/finaglers"&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kevin Oliver and the Core Systems Libraries team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>🌻 Spring Planning 🌻</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2017/03/20/spring-planning/"/>
    <id>https://finagle.github.io/blog/2017/03/20/spring-planning/</id>
    <published>2017-03-19T17:00:00-07:00</published>
    <updated>2017-03-20T16:42:40-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The team working on &lt;a href="https://twitter.github.io/finagle/"&gt;Finagle&lt;/a&gt;, &lt;a href="https://twitter.github.io/finatra/"&gt;Finatra&lt;/a&gt;, and related libraries met last week and did our planning for the next three months. These are high-level goals and as such, have varying degrees of confidence and certainty.&lt;/p&gt;

&lt;h4&gt;In the spirit of Spring cleaning:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Remove Netty 3 support from most protocols. We expect to complete most protocols, however HTTP is a long shot.&lt;/li&gt;
&lt;li&gt;Upgrade &lt;a href="https://thrift.apache.org/"&gt;libthrift&lt;/a&gt; to 0.10.0 from the ancient fork of 0.5.0. (&lt;a href="https://github.com/twitter/scrooge/issues/85"&gt;twitter/scrooge#85&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Deprecate and then remove modules that are unsupported or exist in a zombie-like state. This includes &lt;a href="https://github.com/twitter/ostrich"&gt;ostrich&lt;/a&gt;, &lt;a href="https://github.com/twitter/finagle/tree/develop/finagle-ostrich4"&gt;finagle-ostrich4&lt;/a&gt;, &lt;a href="https://github.com/twitter/finagle/tree/develop/finagle-kestrel"&gt;finagle-kestrel&lt;/a&gt;, &lt;a href="https://github.com/twitter/finagle/tree/develop/finagle-stream"&gt;finagle-stream&lt;/a&gt;, &lt;a href="https://github.com/twitter/finagle/tree/develop/finagle-native"&gt;finagle-native&lt;/a&gt;, &lt;a href="https://github.com/twitter/finagle/tree/develop/finagle-mdns"&gt;finagle-mdns&lt;/a&gt;, and &lt;a href="https://github.com/twitter/util/tree/develop/util-eval"&gt;util-eval&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Minimize dependencies on &lt;a href="https://github.com/twitter/commons"&gt;twitter-commons&lt;/a&gt; with the eventual goal of removing all of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;For those interested in the shiny and new:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Get HTTP/2 to production level quality so that it becomes the default HTTP implementation.&lt;/li&gt;
&lt;li&gt;Continued SSL/TLS work, including STARTTLS support for Mux.&lt;/li&gt;
&lt;li&gt;Finish the work on &lt;a href="https://github.com/twitter/util/tree/develop/util-tunable"&gt;Tunables&lt;/a&gt; such that service owners can dynamically change configuration.&lt;/li&gt;
&lt;li&gt;Finish the work on &lt;a href="https://github.com/twitter/finagle/blob/develop/finagle-core/src/main/scala/com/twitter/finagle/client/MethodBuilder.scala"&gt;MethodBuilder&lt;/a&gt; as a replacement for ClientBuilder and the foundation for more enhancements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;For those who like their tools polished:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Throughput improvements via changes to Futures, defaulting to the Netty 4 native transport, Netty 4 buffer pooling, and more.&lt;/li&gt;
&lt;li&gt;Switch the default &lt;a href="https://twitter.github.io/finagle/guide/Clients.html#load-balancing"&gt;load balancer&lt;/a&gt; to Aperture.&lt;/li&gt;
&lt;li&gt;Switch the default &lt;a href="https://twitter.github.io/finagle/guide/Clients.html#failure-accrual"&gt;failure accrual&lt;/a&gt; policy to success rate instead of consecutive failures.&lt;/li&gt;
&lt;li&gt;Move TwitterServer to use &lt;a href="https://www.slf4j.org/"&gt;slf4j&lt;/a&gt; for logging and begin the process of moving Util and Finagle.&lt;/li&gt;
&lt;li&gt;A handful of Scrooge changes to make the Scala generated code more composable, fixing &lt;a href="https://twitter.github.io/finagle/guide/Clients.html#response-classification"&gt;ResponseClassification&lt;/a&gt; for servers for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please feel free to ask questions on the &lt;a href="https://groups.google.com/forum/#!forum/finaglers"&gt;mailing list&lt;/a&gt; about anything that is unclear and we’ll help clarify if you would like to know more.&lt;/p&gt;

&lt;p&gt;Kevin Oliver and the Core Systems Libraries team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Finagle 6.43 Release Notes</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2017/03/14/release-notes-6-43/"/>
    <id>https://finagle.github.io/blog/2017/03/14/release-notes-6-43/</id>
    <published>2017-03-13T17:00:00-07:00</published>
    <updated>2017-03-14T10:32:38-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;The March releases are hot off the printing press for &lt;a href="https://github.com/twitter/finagle/blob/finagle-6.43.0/CHANGES"&gt;Finagle 6.43.0&lt;/a&gt;, &lt;a href="https://github.com/twitter/finatra/blob/finatra-2.9.0/CHANGELOG.md"&gt;Finatra 2.9.0&lt;/a&gt;, &lt;a href="https://github.com/twitter/scrooge/blob/scrooge-4.15.0/CHANGES"&gt;Scrooge 4.15.0&lt;/a&gt;, &lt;a href="https://github.com/twitter/twitter-server/blob/twitter-server-1.28.0/CHANGES"&gt;TwitterServer 1.28.0&lt;/a&gt;, and &lt;a href="https://github.com/twitter/util/blob/util-6.42.0/CHANGES"&gt;Util 6.42.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a few of the highlights:&lt;/p&gt;

&lt;h3&gt;Finatra&lt;/h3&gt;

&lt;p&gt;See &lt;a href="https://twitter.github.io/finatra/blog/2017/03/13/announcing-the-release-of-finatra-2-dot-9-0/"&gt;accompanying blog post&lt;/a&gt; for details.&lt;/p&gt;

&lt;h3&gt;Finagle&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finagle-http now classifies server error status codes (500s) as failures. This affects success rate metrics and failure accrual. See the &lt;code&gt;com.twitter.finagle.http.serverErrorsAsFailuresV2&lt;/code&gt; &lt;a href="http://twitter.github.io/finagle/guide/Configuration.html#feature-toggles"&gt;toggle&lt;/a&gt; for opting out of this behavior. &lt;a href="https://github.com/twitter/finagle/commit/f34a73443679ac4fe76bc011bfb36a5b1abe9e5e"&gt;f34a7344&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The finagle-http APIs continue their trek to rid themselves of having Netty 3 in its public API.&lt;/li&gt;
&lt;li&gt;finagle-http now has experimental http/2 support. To try it out, pass the command line parameter &lt;code&gt;-com.twitter.finagle.toggle.flag.overrides=com.twitter.finagle.http.UseHttp2=1.0&lt;/code&gt;. Please let us know of any issues that you run into!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Scrooge&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The Scala code generator now supports annotations on enums, enum fields, services, and service functions. &lt;a href="https://github.com/twitter/scrooge/commit/4821b46eec45f8235ed15f196c2649cee5715323"&gt;4821b46e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scala&amp;rsquo;s types for ServiceIfaces are now a &lt;code&gt;Service&lt;/code&gt; from &lt;code&gt;ThriftMethod.Args&lt;/code&gt; to &lt;code&gt;ThriftMethod.SuccessType&lt;/code&gt;, instead of &lt;code&gt;ThriftMethod.Args&lt;/code&gt; to &lt;code&gt;ThriftMethod.Result&lt;/code&gt;. This is a breaking API change though it should generally be easy to adapt existing code to it. &lt;a href="https://github.com/twitter/scrooge/commit/c5ea851546ba215b457fcf09b90e9f1857e954c3"&gt;c5ea8515&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Util&lt;/h3&gt;

&lt;p&gt;Our byte-level abstraction, &lt;code&gt;Buf&lt;/code&gt; got a fresh coat of paint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduce &lt;code&gt;Buf.process&lt;/code&gt; for sequential processing of a &lt;code&gt;Buf&lt;/code&gt;. Finagle has been updated to use it where appropriate, leading to reductions in allocations. &lt;a href="https://github.com/twitter/util/commit/1df3646ffe420256516167591562f85c79498ec5"&gt;1df3646f&lt;/a&gt; and others&lt;/li&gt;
&lt;li&gt;Introduce &lt;code&gt;Buf.write(java.nio.ByteBuffer)&lt;/code&gt; for writing to NIO &lt;code&gt;ByteBuffers&lt;/code&gt;. &lt;a href="https://github.com/twitter/util/commit/d6f7985e2014cc8c3dab71417a450900cd769f5d"&gt;d6f7985e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buf.concat&lt;/code&gt; is now a constant time operation. &lt;a href="https://github.com/twitter/util/commit/bb05f425c6b12d1b2fe9f1a75658aba175fc51f8"&gt;bb05f425&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcatBuf&lt;/code&gt; has been removed, replaced by &lt;code&gt;Buf.apply&lt;/code&gt; and &lt;code&gt;Buf.Composite&lt;/code&gt;. &lt;a href="https://github.com/twitter/util/commit/5833c5609b8ad72cd542e34d9d6edecd143e3bad"&gt;5833c560&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;Guava has been upgraded to version 19.0 from 16.0.1 &lt;a href="https://github.com/twitter/util/commit/d6bdecc9269c34e477b1ce1a6e8f5d22a106e2f9"&gt;d6bdecc9&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Changelogs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finagle/blob/finagle-6.43.0/CHANGES"&gt;Finagle 6.43.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/util/blob/util-6.42.0/CHANGES"&gt;Util 6.42.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/scrooge/blob/scrooge-4.15.0/CHANGES"&gt;Scrooge 4.15.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/twitter-server/blob/twitter-server-1.28.0/CHANGES"&gt;TwitterServer 1.28.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twitter/finatra/blob/finatra-2.9.0/CHANGELOG.md"&gt;Finatra 2.9.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Netty 4 support in Finagle</title>
    <link rel="alternate" href="https://finagle.github.io/blog/2017/02/06/finagle-loves-netty4/"/>
    <id>https://finagle.github.io/blog/2017/02/06/finagle-loves-netty4/</id>
    <published>2017-02-05T16:00:00-08:00</published>
    <updated>2017-03-14T09:53:51-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It&amp;rsquo;s been quite a while since the &lt;a href="http://finagle.github.io/blog/2014/10/20/upgrading-finagle-to-netty-4/"&gt;Netty 4 migration in Finagle&lt;/a&gt; was initially
announced. We&amp;rsquo;ve travelled a long way and are happy to announce that there is now (as of
&lt;a href="https://github.com/twitter/finagle/releases/tag/finagle-6.42.0"&gt;Finagle 6.42&lt;/a&gt;) support for Netty 4 transports in most of the protocols: Thrift, ThriftMux,
Memcached, MySQL, Kestrel, and Redis. Both HTTP/1.1 and HTTP/2 are coming soon!&lt;/p&gt;

&lt;h2&gt;How to enable Netty 4?&lt;/h2&gt;

&lt;p&gt;While we have not yet defaulted to Netty 4, we&amp;rsquo;ve been running it in production for several months
and have gained enough confidence to publicize the availability of the alternative transports in
Finagle.&lt;/p&gt;

&lt;p&gt;We encourage Finagle users to try out the new Netty 4 transports for their protocols and jump on the
fast track to upcoming changes around resiliency (think of HTTP/2) and performance (think of a
reduced allocation profile and better threading model in Netty 4).&lt;/p&gt;

&lt;p&gt;To switch the transport over to Netty 4 supply the following command line flag:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-Dcom.twitter.finagle.toggle.flag.overrides=com.twitter.$protocol.UseNetty4=1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;$protocol&lt;/code&gt; is one of the following: &lt;code&gt;mux&lt;/code&gt; (use this for ThriftMux), &lt;code&gt;thrift&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;,
&lt;code&gt;memcached&lt;/code&gt;, &lt;code&gt;kestrel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This command line flag overrides &lt;a href="https://twitter.github.io/finagle/guide/Configuration.html#feature-toggles"&gt;a feature toggle&lt;/a&gt; that is evaluated at application
startup and is &lt;em&gt;global for all clients/servers running on the same JVM instance&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note that Netty 4 is already enabled by default in &lt;code&gt;finagle-redis&lt;/code&gt; so no need for an extra CLI flag.&lt;/p&gt;

&lt;h2&gt;What about HTTP/1.1?&lt;/h2&gt;

&lt;p&gt;HTTP/1.1 on Netty 4 is still a work in progress. There are known limitations for HTTP clients, but
we&amp;rsquo;ve been successfully running &lt;code&gt;finagle-http&lt;/code&gt; servers with Netty 4 in production for several weeks
and on &lt;a href="https://github.com/twitter/twitter-server"&gt;TwitterServer&lt;/a&gt;&amp;rsquo;s admin interface for several months.&lt;/p&gt;

&lt;p&gt;We feel confident in HTTP/1.1 servers running Netty 4 and encourage you to migrate now using the
toggle override. Please note that this will also switch HTTP clients running in the same JVM
process over to Netty 4, which we do not recommend at this point.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-Dcom.twitter.finagle.toggle.flag.overrides=com.twitter.http.UseNetty4=1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What about HTTP/2?&lt;/h2&gt;

&lt;p&gt;HTTP/2 (i.e., &lt;code&gt;finagle-http2&lt;/code&gt;) should be considered beta as there are known issues with the ALPN
support. We&amp;rsquo;re hoping to roll out a feature-complete HTTP/2 implementation in the next couple of
months. In the meantime, HTTP/2 support can be experimentally enabled on any Finagle HTTP client
or server as shown below.&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.twitter.finagle.Http&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configured&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Http2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"www.example.com:80"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What&amp;rsquo;s next?&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re quite optimistic about enabling Netty 4 by default in the next couple of months. Even though
we&amp;rsquo;re not there yet, we feel very proud of the work we&amp;rsquo;ve done and the progress we&amp;rsquo;ve made. It took
us several years of engineering effort to be able to start serving Netty 4 traffic in production.&lt;/p&gt;

&lt;h2&gt;Where to report problems?&lt;/h2&gt;

&lt;p&gt;Please file a &lt;a href="https://github.com/twitter/finagle/issues"&gt;Github issue&lt;/a&gt; if anything doesn&amp;rsquo;t look right when Netty 4 is enabled.&lt;/p&gt;
</content>
  </entry>
</feed>
